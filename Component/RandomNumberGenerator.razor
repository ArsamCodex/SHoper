@inject SHoper.Data.ApplicationDbMyData _Context
@attribute [Authorize(Roles = "Admin,Player")]
@inject UserManager<IdentityUser> UserManager
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h5>Eu Roul</h5>

<p>User ID : @userId</p>
<br>
<p>
    Credit : @Credit
</p>
<br />
<br />
<MudButton Variant="Variant.Filled" @onclick="setCredit">Get Free Credit</MudButton>
<br />

 
    @foreach (var number in Enumerable.Range(0, 37))
    {
    <MudButtonGroup Variant="Variant.Outlined">
        <MudButton Variant="Variant.Filled" @onclick="() => IncrementCount(number)">@(number.ToString() + " (" + clickCounts[number] + ")")</MudButton>
    </MudButtonGroup>
 
    }
<br />

<br>
<br />
<br />
@if (generatingNmber)
{
    <img src="casino.jpg" als="Loading">
}
else
{
    <MudTextField @bind-Value="userNumbers" Label="CHoose numbers $$" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>

    <MudTextField @bind-Value="BetAmount" Label="Bet Amount $$" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
}
<MudCheckBox @bind-Value="@Basic_CheckBox1" Label="Even"></MudCheckBox>
<MudCheckBox @bind-Value="@Basic_CheckBox2" Label="Ödd"></MudCheckBox>

@winningNumberMessage

@Basic_CheckBox1
@Basic_CheckBox2




<MudButton Variant="Variant.Filled" @onclick="GenerateRandomNumber">Spin</MudButton>

@code {
    public bool Basic_CheckBox1 { get; set; } = false;
    public bool Basic_CheckBox2 { get; set; } = false;


    [Parameter]
    public EventCallback<int> OnRandomGenerated { get; set; }
    [Parameter]
    public EventCallback<bool> GenerationNumberChanged { get; set; }

    private bool generatingNmber = false;
    public string userNumbers = "";
    public string winningNumberMessage = "";
    public int BetAmount;
    public int Credit = 100;
    private string userId;
    private int[] clickCounts = new int[38];


    private void IncrementCount(int number)
    {
        clickCounts[number]++; // Increment the count for the clicked button

        userNumbers += number.ToString() + ",\n";
        Console.WriteLine(userNumbers);
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;

        if (userPrincipal.Identity.IsAuthenticated)
        {
            var user = await UserManager.GetUserAsync(userPrincipal);
            userId = user.Id.ToString();

            bool userExists = await _Context.CasinoPlayers.AnyAsync(c => c.Userid == userId);
            CreditLoad();
            if (!userExists)
            {
                _Context.CasinoPlayers.Add(new Model.CasinoUsers.CasinoPlayers
                    {
                        Userid = userId,
                        Credit = Credit,
                    });
                await _Context.SaveChangesAsync();
            }

        }
    }
    void setCredit()
    {
        if (Credit < 50)
        {
            Credit = 100;
        }
    }
    private async Task GenerateRandomNumber()
    {
        generatingNmber = true;
        await GenerationNumberChanged.InvokeAsync(true);
        await Task.Delay(5000);
        string[] numbersArray = userNumbers.Split(',');

        List<int> numbers = new List<int>();

        foreach (string numberString in numbersArray)
        {
            if (int.TryParse(numberString.Trim(), out int number))
            {
                numbers.Add(number);
            }
        }

        Random random = new Random();
        int randomGenerateIndexNumber = random.Next(0, 37);

        _Context.IncomingNumber.Add(
        new Model.IncomingNumber
            {
                DateTimeIn = DateTime.Now,
                IncomingNumberT = randomGenerateIndexNumber,
            });
        await _Context.SaveChangesAsync();

        var IncomingColor = GetColor(randomGenerateIndexNumber);
        var EvvenOrOdd = CHeckEvenOrOod(randomGenerateIndexNumber);

        if (numbers.Contains(randomGenerateIndexNumber))
        {
            var tottalBet = CountOccurrences(numbers, randomGenerateIndexNumber);
            Console.WriteLine(tottalBet);

            winningNumberMessage = $"COngrats ! {randomGenerateIndexNumber} is the wining numnebr . Color Is {IncomingColor} + {EvvenOrOdd}  ";
            Credit = Credit+ (tottalBet * 36);
            var user = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
            user.Credit = Credit;
            await _Context.SaveChangesAsync();

        }
        else
        {
            winningNumberMessage = $"You have losed !  {randomGenerateIndexNumber} is the wining numnebr . Color IS {IncomingColor} + {EvvenOrOdd} ";
            var loosingPsitionBet = CountRepeatedNumbers(numbers);
            Credit = Credit - loosingPsitionBet;
            var user = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
            user.Credit = Credit;
            await _Context.SaveChangesAsync();

        }

        await OnRandomGenerated.InvokeAsync(randomGenerateIndexNumber);
        generatingNmber = false;
        await GenerationNumberChanged.InvokeAsync(false);

    }
    public enum Color
    {
        Red,
        Black,
        Green
    }
    public static Color GetColor(int number)
    {
        switch (number)
        {
            case 0:
                return Color.Black;
            case 1:
            case 3:
            case 5:
            case 7:
            case 9:
            case 12:
            case 14:
            case 16:
            case 19:
            case 21:
            case 23:
            case 25:
            case 27:
            case 30:
            case 32:
            case 34:
            case 36:
                return Color.Red;
            default:
                return Color.Black;

        }

    }
    public static string CHeckEvenOrOod(int number)
    {
        if (number == 0)
        {
            return "Number zero";

        }
        else if (number % 2 == 0)
        {
            return "Evven";
        }
        else
        {
            return "odd";
        }
    }
    void CreditLoad()
    {
        var LoadFor = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
        Credit = LoadFor.Credit;
    }
  
    static int CountOccurrences(List<int> numbers, int numberToCount)
    {
        int count = 0;

        // Count occurrences of the specified number
        foreach (int num in numbers)
        {
            if (num == numberToCount)
            {
                count++;
            }
        }

        return count;
    }
    static int CountRepeatedNumbers(List<int> numbers)
    {
        Dictionary<int, int> countDict = new Dictionary<int, int>();

        // Count occurrences of each number
        foreach (int num in numbers)
        {
            if (countDict.ContainsKey(num))
            {
                countDict[num]++;
            }
            else
            {
                countDict[num] = 1;
            }
        }

        int totalCount = 0;

        // Sum up counts of numbers with occurrences > 1
        foreach (int count in countDict.Values)
        {
            if (count > 1)
            {
                totalCount += count;
            }
        }

        return totalCount;
    }

}

