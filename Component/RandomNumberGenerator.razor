@inject SHoper.Data.ApplicationDbMyData _Context
@attribute [Authorize(Roles = "Admin,Player")]
@inject UserManager<IdentityUser> UserManager
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .container {
        display: flex;
    }
</style>

<div style="float:right;border:2px solid black">
    @if (generatingNmber)
    {
        <img src="rv4.gif" als="Loading">

    }

</div>
<p>User ID : @userId</p><p><MudButton Variant="Variant.Filled" @onclick="setCredit">Get Free Credit</MudButton></p>

<p>
    Credit : @Credit
</p>
<br />






<div style="border:2px solid black;width:250px">
    <p>Numbers Stake : @TottalStake</p>
    <p>Tottal Staked Bet :@AllBets</p>
</div>


<center><h3>  @winningNumberMessage</h3></center>
<br />
@{
    var numbersColumn1 = Enumerable.Range(1, 12).Select(x => x * 3).Where(x => x <= 36);
    var numbersColumn2 = Enumerable.Range(1, 12).Select(x => x * 3 - 1).ToList();
    var numbersColumn3 = Enumerable.Range(0, 12).Select(x => x * 3 + 1);
}
<div class="container">

    <div>
        <button style="height:110px;width:60px;border:2px solid black;background-color:#90EE90" @onclick="() => IncrementCount(0)">
            @($"0({(clickCounts.Length > 0 ? clickCounts[0] : 0)})")
        </button>
    </div>

    <div>
        <div class="row">
            <div class="col" style=" width: auto">
                <div class="d-flex flex-row">
                    @foreach (var number in numbersColumn1)
                    {
                        <MudButtonGroup Variant="Variant.Outlined">
                            @{
                                // Check if the number meets the criteria for a red background color
                                var isRedBackground = number == 3 || number == 9 || number == 12 || number == 18 || number == 21 || number == 27 || number == 30 || number == 36;
                                // Check if the number meets the criteria for a black background color
                                var isBlackBackground = number == 6 || number == 15 || number == 24 || number == 33;
                            }
                            <MudButton Variant="Variant.Filled"
                            @onclick="() => IncrementCount(number)"
                                       style="@($"background-color: {(isRedBackground ? "red" : (isBlackBackground ? "black" : "transparent"))};")">
                                @($"{number} ({(clickCounts.Length > number ? clickCounts[number] : 0)})")
                            </MudButton>
                        </MudButtonGroup>
                    }
                </div>
            </div>

        </div>
        <div class="col">
            <div class="d-flex flex-row" style=" width: auto">
                @foreach (var number in numbersColumn2)
                {
                    if (number < clickCounts.Length)
                    {
                        var countIndex = number >= 0 ? number : 0;
                        <MudButtonGroup Variant="Variant.Outlined">
                            @{
                                // Check if the number meets the criteria for a red background color
                                var isRedBackground = number == 5 || number == 14 || number == 23 || number == 32;
                                // Check if the number meets the criteria for a black background color
                                var isBlackBackground = number == 2 || number == 8 || number == 11 || number == 17 || number == 20 || number == 26 || number == 29 || number == 35;
                            }
                            <MudButton Variant="Variant.Filled"
                            @onclick="() => IncrementCount(number)"
                                       style="@($"background-color: {(isRedBackground ? "red" : (isBlackBackground ? "black" : "transparent"))};")">
                                @($"{number} ({(clickCounts.Length > number ? clickCounts[number] : 0)})")
                            </MudButton>
                        </MudButtonGroup>
                    }
                }
            </div>
        </div>
        <div class="col">
            <div class="d-flex flex-row" style=" width: auto">
                @foreach (var number in numbersColumn3)
                {
                    if (number < clickCounts.Length)
                    {
                        var countIndex = number >= 0 ? number : 0;
                        <MudButtonGroup Variant="Variant.Outlined">
                            @{
                                // Check if the number meets the criteria for a red background color
                                var isRedBackground = number == 1 || number == 7 || number == 16 || number == 19 || number == 25 || number == 34;
                                // Check if the number meets the criteria for a black background color
                                var isBlackBackground = number == 4 || number == 10 || number == 13 || number == 22 || number == 28 || number == 31;
                            }
                            <MudButton Variant="Variant.Filled"
                            @onclick="() => IncrementCount(number)"
                                       style="@($"background-color: {(isRedBackground ? "red" : (isBlackBackground ? "black" : "transparent"))};")">
                                @($"{number} ({(clickCounts.Length > number ? clickCounts[number] : 0)})")
                            </MudButton>
                        </MudButtonGroup>
                    }
                }
            </div>

        </div>


    </div>
    <div class="d-flex flex-row" style="float:right">
        <MudButtonGroup Variant="Variant.Outlined" VerticalAlign="true">
            <MudButton @onclick="() => TwoToOne()" Style="background-color:#90EE90">2 To 1</MudButton>
            <MudButton @onclick="() => TwoToTwo()" Style="background-color:#90EE90">2 To 2</MudButton>
            <MudButton @onclick="() => TwoToThree()" Style="background-color:#90EE90">2 To 3</MudButton>
        </MudButtonGroup>
    </div>

</div>






<div style="margin-left: 300px;">
    <button @onclick="() => EvenCOunter2()" style="padding: 10px 20px; margin: 5px; color: black; border:  2px solid black; border-radius: 5px; cursor: pointer; ">Even @EvenCounter </button>
    <button @onclick="() => OodCOunter2()" style="padding: 10px 20px; margin: 5px;  color: black; border: 2px solid black; border-radius: 5px; cursor: pointer;">Ood @OodCounter</button>
    <button @onclick="() => RedCounterT()" style="padding: 10px 20px; margin: 5px;  color:  Black;background-color: #FF0000; border: 2px solid; border-radius: 5px; cursor: pointer;">Red</button>
    <button @onclick="() => BlackCounterT()" style="padding: 10px 20px; margin: 5px;  color: White;background-color: 	#000000; border: 2px solid; border-radius: 5px; cursor: pointer;">Black</button>
</div>
<br />
<br>
<br />
<br />
<!---
else
{
     <MudTextField @bind-Value="userNumbers" Label="CHoose numbers $$" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
    <MudTextField @bind-Value="BetAmount" Label="Bet Amount $$" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
}-->





<MudButton Variant="Variant.Filled" @onclick="GenerateRandomNumber">Spin</MudButton>

@code {


    public int EvenCounter;
    public int OodCounter;
    public int BlackCounter;
    public int RedCounter;
    [Parameter]
    public EventCallback<int> OnRandomGenerated { get; set; }
    [Parameter]
    public EventCallback<bool> GenerationNumberChanged { get; set; }

    private bool generatingNmber = false;
    public string userNumbers = "";
    public string winningNumberMessage = "";

    public int Credit = 100;
    private string userId;
    private int[] clickCounts = new int[38];
    private int TottalStake;
    public int RedTottalStake;
    public int BlackTottalStake;
    public int OOdTottalStake;
    public int EvenTottalStake;
    List<int> numbers = new List<int>();
    private int AllBets;
    private int TwoToOne1;
    private int TwoToTwo2;
    private int TwoToThree3;
    private void IncrementCount(int number)
    {
        clickCounts[number]++; // Increment the count for the clicked button

        userNumbers += number.ToString() + ",\n";
        string[] numbersArray = userNumbers.Split(',');


        List<int> numbers = new List<int>();
        foreach (string numberString in numbersArray)
        {
            if (int.TryParse(numberString.Trim(), out int number2))
            {
                numbers.Add(number2);
            }
        }
        Credit = Credit - 1;
        TottalStake = numbers.Count;

    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;

        if (userPrincipal.Identity.IsAuthenticated)
        {
            var user = await UserManager.GetUserAsync(userPrincipal);
            userId = user.Id.ToString();

            bool userExists = await _Context.CasinoPlayers.AnyAsync(c => c.Userid == userId);
            CreditLoad();
            if (!userExists)
            {
                _Context.CasinoPlayers.Add(new Model.CasinoUsers.CasinoPlayers
                    {
                        Userid = userId,
                        Credit = Credit,
                    });
                await _Context.SaveChangesAsync();
            }

        }
    }
    void setCredit()
    {
        if (Credit < 50)
        {
            Credit = 100;
        }
    }
    private async Task GenerateRandomNumber()
    {
        AllBets = TottalStake + EvenCounter + OodCounter + RedTottalStake + BlackTottalStake + TwoToOne1 + TwoToTwo2 + TwoToThree3;
        generatingNmber = true;
        await GenerationNumberChanged.InvokeAsync(true);
        await Task.Delay(5000);
        string[] numbersArray = userNumbers.Split(',');

        foreach (string numberString in numbersArray)
        {
            if (int.TryParse(numberString.Trim(), out int number))
            {
                numbers.Add(number);
            }
        }
        Random random = new Random();
        int randomGenerateIndexNumber = random.Next(0, 37);
        _Context.IncomingNumber.Add(
        new Model.IncomingNumber
            {
                DateTimeIn = DateTime.Now,
                IncomingNumberT = randomGenerateIndexNumber,
            });
        await _Context.SaveChangesAsync();

        var IncomingColor = GetColor(randomGenerateIndexNumber);
        var EvvenOrOdd = CHeckEvenOrOod(randomGenerateIndexNumber);

        if (numbers.Contains(randomGenerateIndexNumber))
        {
            var tottalBet = CountOccurrences(numbers, randomGenerateIndexNumber);
            Console.WriteLine(tottalBet);

            winningNumberMessage = $"The Number Is ! {randomGenerateIndexNumber} . Color Is {IncomingColor} + {EvvenOrOdd}  ";

            Credit = Credit + (tottalBet * 36);
            var user = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
            user.Credit = Credit;
            await _Context.SaveChangesAsync();

        }
        else
        {
            winningNumberMessage = $"The Number Is !  {randomGenerateIndexNumber}. Color IS {IncomingColor} + {EvvenOrOdd} ";
            var loosingPsitionBet = CountRepeatedNumbers(numbers);



            Credit = Credit - loosingPsitionBet;
            var user = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
            user.Credit = Credit;
            await _Context.SaveChangesAsync();

        }
        if (CHeckEvenOrOod(randomGenerateIndexNumber) == "Even")
        {
            var NewCredit = 0;
            NewCredit = EvenCounter * 2;
            Credit = Credit + NewCredit;
            var user = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
            user.Credit = Credit;
            await _Context.SaveChangesAsync();
        }
        if (CHeckEvenOrOod(randomGenerateIndexNumber) == "odd")
        {
            var NewCredit = 0;
            NewCredit = OodCounter * 2;
            Credit = Credit + NewCredit;
            var user = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
            user.Credit = Credit;
            await _Context.SaveChangesAsync();
        }
        if (TwoToOne1 > 0 && TwotoNumbersReward(randomGenerateIndexNumber) == "TwoToOne")
        {
            var betTimes3 = TwoToOne1 * 3;
            Credit = Credit + betTimes3;
            var user = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
            user.Credit = Credit;
            await _Context.SaveChangesAsync();
        }
        if (TwoToTwo2 > 0 && TwotoNumbersReward(randomGenerateIndexNumber) == "TwoToTwo")
        {
            var betTimes3 = TwoToTwo2 * 3;
            Credit = Credit + betTimes3;
            var user = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
            user.Credit = Credit;
            await _Context.SaveChangesAsync();
        }
        if (TwoToThree3 > 0 && TwotoNumbersReward(randomGenerateIndexNumber) == "TwoToThree")
        {
            var betTimes3 = TwoToThree3 * 3;
            Credit = Credit + betTimes3;
            var user = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
            user.Credit = Credit;
            await _Context.SaveChangesAsync();
        }


        await OnRandomGenerated.InvokeAsync(randomGenerateIndexNumber);
        generatingNmber = false;
        await GenerationNumberChanged.InvokeAsync(false);

        ResetCount();

    }
    public enum Color
    {
        Red,
        Black,
        Green
    }
    public static Color GetColor(int number)
    {
        switch (number)
        {
            case 0:
                return Color.Black;
            case 1:
            case 3:
            case 5:
            case 7:
            case 9:
            case 12:
            case 14:
            case 16:
            case 19:
            case 21:
            case 23:
            case 25:
            case 27:
            case 30:
            case 32:
            case 34:
            case 36:
                return Color.Red;
            default:
                return Color.Black;

        }

    }
    public static string CHeckEvenOrOod(int number)
    {
        if (number == 0)
        {
            return " 0";

        }
        else if (number % 2 == 0)
        {
            return "Even";
        }
        else
        {
            return "odd";
        }
    }
    void CreditLoad()
    {
        var LoadFor = _Context.CasinoPlayers.FirstOrDefault(c => c.Userid == userId);
        Credit = LoadFor.Credit;
    }

    static int CountOccurrences(List<int> numbers, int numberToCount)
    {
        int count = 0;

        // Count occurrences of the specified number
        foreach (int num in numbers)
        {
            if (num == numberToCount)
            {
                count++;
            }
        }

        return count;
    }
    static int CountRepeatedNumbers(List<int> numbers)
    {
        Dictionary<int, int> countDict = new Dictionary<int, int>();

        // Count occurrences of each number
        foreach (int num in numbers)
        {
            if (countDict.ContainsKey(num))
            {
                countDict[num]++;
            }
            else
            {
                countDict[num] = 1;
            }
        }

        int totalCount = 0;

        // Sum up counts of numbers with occurrences > 1
        foreach (int count in countDict.Values)
        {
            if (count > 1)
            {
                totalCount += count;
            }
        }

        return totalCount;
    }
    void EvenCOunter2()
    {
        EvenCounter++;
        EvenTottalStake = EvenCounter;
        Credit = Credit - 1;
    }
    void OodCOunter2()
    {
        OodCounter++;
        Credit = Credit - 1;
        OOdTottalStake = OodCounter;
    }
    void RedCounterT()
    {
        RedCounter++;

        Credit = Credit - 1;
        RedTottalStake = RedCounter;
    }
    void BlackCounterT()
    {
        BlackCounter++;

        Credit = Credit - 1;
        BlackTottalStake = BlackCounter;
    }
    void TwoToOne()
    {
        TwoToOne1++;
        Credit = Credit - 1;
    }
    void TwoToTwo()
    {
        TwoToTwo2++;
        Credit = Credit - 1;
    }
    void TwoToThree()
    {
        TwoToThree3++;
        Credit = Credit - 1;
    }
    public static string TwotoNumbersReward(int number)
    {
        switch (number)
        {
            case 0:
                return "0";

            case 3:
            case 6:
            case 9:
            case 12:
            case 15:
            case 18:
            case 21:
            case 24:
            case 27:
            case 30:
            case 36:
                return "TwoToOne";

            case 2:
            case 5:
            case 8:
            case 11:
            case 14:
            case 17:
            case 20:
            case 23:
            case 26:
            case 39:
            case 32:
                return "TwoToTwo";
            case 1:
            case 4:
            case 7:
            case 10:
            case 13:
            case 16:
            case 19:
            case 22:
            case 25:
            case 28:
            case 31:
                return "TwoToThree";
            default:
                return "None";

        }


    }
    void ResetCount()
    {
        for (int i = 0; i < clickCounts.Length; i++)
        {
            clickCounts[i] = 0;
        }
        TottalStake = 0;
        numbers.Clear();
        AllBets = 0;
    }
}

