<h3>RandomNumberGenerator</h3>
@inject SHoper.Data.ApplicationDbMyData _Context

<button @onclick="setCredit">Get Credit</button>

<br>
<br />
<br />
@if (generatingNmber)
{
    <img src="casino.jpg" als="Loading">
}
else
{
    <input type="text" @bind="userNumbers" placeholder="your bet please" />
    <input type="text" @bind="BetAmount" placeholder="your bet Amount" />
   
}
@winningNumberMessage
<p>
    Credit Is : @Credit
</p>


<button @onclick="GenerateRandomNumber" >Start</button>

@code {

    [Parameter]
    public EventCallback<int> OnRandomGenerated { get; set; }

    [Parameter]
    public EventCallback<bool> GenerationNumberChanged { get; set; }

    private bool generatingNmber = false;
    public string userNumbers = "";
    public string winningNumberMessage = "";
    public int BetAmount;
    public int Credit = 100;


    void setCredit()
    {
        if(Credit < 50)
        {
            Credit = 100;
        }
    }



    private async Task GenerateRandomNumber()
    {
        generatingNmber = true;
        await GenerationNumberChanged.InvokeAsync(true);

        await Task.Delay(5000);
        string[] numbersArray = userNumbers.Split(',');
        List<int> numbers = new List<int>();
        foreach (string numberString in numbersArray)
        {
            if (int.TryParse(numberString.Trim(), out int number))
            {
                numbers.Add(number);
            }
        }

        Random random = new Random();
        int randomGenerateIndexNumber = random.Next(0, 37);

        _Context.IncomingNumber.Add(
        new Model.IncomingNumber
            {
                DateTimeIn = DateTime.Now,
                IncomingNumberT = randomGenerateIndexNumber,
            });
            _Context.SaveChangesAsync();

        var IncomingColor = GetColor(randomGenerateIndexNumber);
        var EvvenOrOdd = CHeckEvenOrOod(randomGenerateIndexNumber);

        if (numbers.Contains(randomGenerateIndexNumber))
        {

            winningNumberMessage = $"COngrats ! {randomGenerateIndexNumber} is the wining numnebr . Color Is {IncomingColor} + {EvvenOrOdd}  ";
            Credit = BetAmount * 36;
        }
        else
        {
            winningNumberMessage = $"You have losed !  {randomGenerateIndexNumber} is the wining numnebr . Color IS {IncomingColor} + {EvvenOrOdd} ";
            Credit = Credit - BetAmount;
        }

        await OnRandomGenerated.InvokeAsync(randomGenerateIndexNumber);
        generatingNmber = false;
        await GenerationNumberChanged.InvokeAsync(false);

    }
    public enum Color
    {
        Red,
        Black,
        Green
    }
    public static Color GetColor(int number)
    {
        switch (number)
        {
            case 0:
                return Color.Black;
            case 1:
            case 3:
            case 5:
            case 7:
            case 9:
            case 12:
            case 14:
            case 16:
            case 19:
            case 21:
            case 23:
            case 25:
            case 27:
            case 30:
            case 32:
            case 34:
            case 36:
                return Color.Red;
            default:
                return Color.Black;

        }
     
    }
    public static string CHeckEvenOrOod(int number)
    {
        if (number == 0)
        {
            return "Number zero";

        }
        else if (number % 2 == 0)
        {
            return "Evven";
        }
        else
        {
            return "odd";
        }
    }
}

