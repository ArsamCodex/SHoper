
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<IdentityUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject NavigationManager NavigationManager
@inject SHoper.Data.ApplicationDbContext _context
@attribute [Authorize(Roles = "Admin")]

<p>Email Address: @Email</p>
<p>Current Role: @CurrentRole</p>

<select @bind="SelectedRole">
    @if (Roles != null)
    {
        @foreach (var role in Roles)
        {
            <option value="@role.Name">@role.Name</option>
        }
    }
</select>

<button @onclick="ChangeRole">Change Role</button>


@code {
    [Parameter]
    public string UserId { get; set; }

    private string? SelectedRole { get; set; }
    private string? CurrentRole;// New property to store current role
    private List<IdentityRole> Roles { get; set; }
    private string Email { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.FindByIdAsync(UserId);
        Email = user.Email;
        var userRoles = await UserManager.GetRolesAsync(user);
        CurrentRole = userRoles.FirstOrDefault();
        Roles = await RoleManager.Roles.ToListAsync();
    }
    private async Task ChangeRole()
    {
        var user = await UserManager.FindByIdAsync(UserId);
        // Check if the selected role exists
        var roleExists = await RoleManager.RoleExistsAsync(SelectedRole);
        var userRoles = await UserManager.GetRolesAsync(user);
        await UserManager.RemoveFromRolesAsync(user, userRoles);

        // Add the user to the selected role
        await UserManager.AddToRoleAsync(user, SelectedRole);
        //StateHasChanged();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
      
         
        
    }

}

