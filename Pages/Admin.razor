@page "/Admin"
@inject UserManager<IdentityUser> UserManager
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore;
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Admin")]
 
@if (Users != null && Users.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Email</th>
                <!-- Add additional columns as needed -->
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Users)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <!-- Add additional columns as needed -->
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No users found.</p>
}
@EmailToGet
@code {
    private string userId;
    public string EmailToGet { get; set; }

    public List<IdentityUser> Users { get; set; }

    private IdentityUser user;

    protected override async Task OnInitializedAsync()
    {
        // user = await UserManager.FindByIdAsync(UserNameID.ToString());

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userPrincipal = authState.User;

        if (userPrincipal.Identity.IsAuthenticated)
        {
            var user = await UserManager.GetUserAsync(userPrincipal);
            EmailToGet = user.Email.ToString();
            userId = user.Id.ToString();

            Users = await UsersToSHow();
        }


    }
    public async Task<List<IdentityUser>> UsersToSHow()
    {
        return await UserManager.Users.ToListAsync();
        
    }
}
